<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="16" passed="15" failed="0" skipped="1">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-11-11T12:51:33 IST" name="Suite" finished-at="2023-11-11T12:53:18 IST" duration-ms="105425">
    <groups>
    </groups>
    <test started-at="2023-11-11T12:51:33 IST" name="Test" finished-at="2023-11-11T12:53:18 IST" duration-ms="105425">
      <class name="testcases.automationpracticealert">
        <test-method is-config="true" signature="beforeclass()[pri:0, instance:testcases.automationpracticealert@6c372fe6]" started-at="2023-11-11T12:51:44 IST" name="beforeclass" finished-at="2023-11-11T12:51:50 IST" duration-ms="6020" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method signature="handlealert()[pri:0, instance:testcases.automationpracticealert@6c372fe6]" started-at="2023-11-11T12:51:50 IST" name="handlealert" finished-at="2023-11-11T12:51:50 IST" duration-ms="371" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- handlealert -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.automationpracticealert@6c372fe6]" started-at="2023-11-11T12:51:50 IST" name="launchApp" finished-at="2023-11-11T12:51:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.automationpracticealert.handlealert()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:testcases.automationpracticealert@6c372fe6]" started-at="2023-11-11T12:51:50 IST" name="afterclass" finished-at="2023-11-11T12:51:50 IST" duration-ms="226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- testcases.automationpracticealert -->
      <class name="testcases.AuthenticationPopup">
        <test-method is-config="true" signature="beforeclass()[pri:0, instance:testcases.AuthenticationPopup@68f1b17f]" started-at="2023-11-11T12:53:02 IST" name="beforeclass" finished-at="2023-11-11T12:53:08 IST" duration-ms="6335" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.AuthenticationPopup@68f1b17f]" started-at="2023-11-11T12:53:08 IST" name="launchApp" finished-at="2023-11-11T12:53:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.AuthenticationPopup.authpopup() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="authpopup()[pri:0, instance:testcases.AuthenticationPopup@68f1b17f]" started-at="2023-11-11T12:53:08 IST" name="authpopup" finished-at="2023-11-11T12:53:18 IST" duration-ms="9421" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- authpopup -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:testcases.AuthenticationPopup@68f1b17f]" started-at="2023-11-11T12:53:18 IST" name="afterclass" finished-at="2023-11-11T12:53:18 IST" duration-ms="657" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- testcases.AuthenticationPopup -->
      <class name="testcases.WebTable">
        <test-method is-config="true" signature="beforeclass()[pri:0, instance:testcases.WebTable@6e15fe2]" started-at="2023-11-11T12:52:50 IST" name="beforeclass" finished-at="2023-11-11T12:52:56 IST" duration-ms="6385" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.WebTable@6e15fe2]" started-at="2023-11-11T12:52:56 IST" name="launchApp" finished-at="2023-11-11T12:52:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.WebTable.webtable() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="webtable()[pri:0, instance:testcases.WebTable@6e15fe2]" started-at="2023-11-11T12:52:56 IST" name="webtable" finished-at="2023-11-11T12:53:02 IST" duration-ms="5774" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- webtable -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:testcases.WebTable@6e15fe2]" started-at="2023-11-11T12:53:02 IST" name="afterclass" finished-at="2023-11-11T12:53:02 IST" duration-ms="293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- testcases.WebTable -->
      <class name="testcases.Doubleclick">
        <test-method is-config="true" signature="beforeclass()[pri:0, instance:testcases.Doubleclick@2a3888c1]" started-at="2023-11-11T12:52:07 IST" name="beforeclass" finished-at="2023-11-11T12:52:14 IST" duration-ms="7063" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.Doubleclick@2a3888c1]" started-at="2023-11-11T12:52:14 IST" name="launchApp" finished-at="2023-11-11T12:52:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.Doubleclick.doubleclick() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="doubleclick()[pri:0, instance:testcases.Doubleclick@2a3888c1]" started-at="2023-11-11T12:52:14 IST" name="doubleclick" finished-at="2023-11-11T12:52:21 IST" duration-ms="6222" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- doubleclick -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:testcases.Doubleclick@2a3888c1]" started-at="2023-11-11T12:52:21 IST" name="afterclass" finished-at="2023-11-11T12:52:21 IST" duration-ms="218" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- testcases.Doubleclick -->
      <class name="testcases.Selectcountry">
        <test-method is-config="true" signature="beforeclass()[pri:0, instance:testcases.Selectcountry@14fa86ae]" started-at="2023-11-11T12:52:38 IST" name="beforeclass" finished-at="2023-11-11T12:52:45 IST" duration-ms="6473" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method signature="selectclass()[pri:0, instance:testcases.Selectcountry@14fa86ae]" started-at="2023-11-11T12:52:45 IST" name="selectclass" finished-at="2023-11-11T12:52:49 IST" duration-ms="4700" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectclass -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.Selectcountry@14fa86ae]" started-at="2023-11-11T12:52:45 IST" name="launchApp" finished-at="2023-11-11T12:52:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.Selectcountry.selectclass() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:testcases.Selectcountry@14fa86ae]" started-at="2023-11-11T12:52:49 IST" name="afterclass" finished-at="2023-11-11T12:52:50 IST" duration-ms="295" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- testcases.Selectcountry -->
      <class name="testcases.automationpracticetestcases">
        <test-method is-config="true" signature="setup()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:33 IST" name="setup" finished-at="2023-11-11T12:51:33 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="extentreportsetup()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:33 IST" name="extentreportsetup" finished-at="2023-11-11T12:51:33 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- extentreportsetup -->
        <test-method is-config="true" signature="beforeclass()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:33 IST" name="beforeclass" finished-at="2023-11-11T12:51:42 IST" duration-ms="8782" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:42 IST" name="launchApp" finished-at="2023-11-11T12:51:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.automationpracticetestcases.enteraddress()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="enteraddress()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:42 IST" name="enteraddress" finished-at="2023-11-11T12:51:42 IST" duration-ms="295" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- enteraddress -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:42 IST" name="launchApp" finished-at="2023-11-11T12:51:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.automationpracticetestcases.enteremail()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="enteremail()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:42 IST" name="enteremail" finished-at="2023-11-11T12:51:42 IST" duration-ms="110" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- enteremail -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:42 IST" name="launchApp" finished-at="2023-11-11T12:51:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.automationpracticetestcases.enterphone()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="enterphone()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:42 IST" name="enterphone" finished-at="2023-11-11T12:51:42 IST" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- enterphone -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:42 IST" name="launchApp" finished-at="2023-11-11T12:51:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.automationpracticetestcases.newbrowserwindowbtn()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="newbrowserwindowbtn()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:42 IST" name="newbrowserwindowbtn" finished-at="2023-11-11T12:51:42 IST" duration-ms="76" status="SKIP">
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[This is Skipped]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: This is Skipped
at testcases.automationpracticetestcases.newbrowserwindowbtn(automationpracticetestcases.java:57)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newbrowserwindowbtn -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:42 IST" name="launchApp" finished-at="2023-11-11T12:51:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.automationpracticetestcases.selectgender()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="selectgender()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:42 IST" name="selectgender" finished-at="2023-11-11T12:51:43 IST" duration-ms="432" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectgender -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:43 IST" name="launchApp" finished-at="2023-11-11T12:51:43 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.automationpracticetestcases.selectmonday()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="selectmonday()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:43 IST" name="selectmonday" finished-at="2023-11-11T12:51:43 IST" duration-ms="177" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectmonday -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:43 IST" name="launchApp" finished-at="2023-11-11T12:51:43 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.automationpracticetestcases.selectsunday()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="selectsunday()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:43 IST" name="selectsunday" finished-at="2023-11-11T12:51:43 IST" duration-ms="89" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectsunday -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:43 IST" name="launchApp" finished-at="2023-11-11T12:51:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.automationpracticetestcases.verifynewbrowserwindowtext()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="verifynewbrowserwindowtext()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:43 IST" name="verifynewbrowserwindowtext" finished-at="2023-11-11T12:51:43 IST" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifynewbrowserwindowtext -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:43 IST" name="launchApp" finished-at="2023-11-11T12:51:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.automationpracticetestcases.verifypage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="verifypage()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:43 IST" name="verifypage" finished-at="2023-11-11T12:51:43 IST" duration-ms="121" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifypage -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:51:43 IST" name="afterclass" finished-at="2023-11-11T12:51:44 IST" duration-ms="314" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:testcases.automationpracticetestcases@78a773fd]" started-at="2023-11-11T12:53:19 IST" name="teardown" finished-at="2023-11-11T12:53:19 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- testcases.automationpracticetestcases -->
      <class name="testcases.Iframe">
        <test-method is-config="true" signature="beforeclass()[pri:0, instance:testcases.Iframe@4167d97b]" started-at="2023-11-11T12:52:21 IST" name="beforeclass" finished-at="2023-11-11T12:52:27 IST" duration-ms="6296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.Iframe@4167d97b]" started-at="2023-11-11T12:52:27 IST" name="launchApp" finished-at="2023-11-11T12:52:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.Iframe.iframe() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="iframe()[pri:0, instance:testcases.Iframe@4167d97b]" started-at="2023-11-11T12:52:27 IST" name="iframe" finished-at="2023-11-11T12:52:38 IST" duration-ms="10534" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- iframe -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:testcases.Iframe@4167d97b]" started-at="2023-11-11T12:52:38 IST" name="afterclass" finished-at="2023-11-11T12:52:38 IST" duration-ms="312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- testcases.Iframe -->
      <class name="testcases.Datepicker">
        <test-method is-config="true" signature="beforeclass()[pri:0, instance:testcases.Datepicker@58594a11]" started-at="2023-11-11T12:51:50 IST" name="beforeclass" finished-at="2023-11-11T12:51:57 IST" duration-ms="6320" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method is-config="true" signature="launchApp(java.lang.reflect.Method)[pri:0, instance:testcases.Datepicker@58594a11]" started-at="2023-11-11T12:51:57 IST" name="launchApp" finished-at="2023-11-11T12:51:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.Datepicker.datePicker() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApp -->
        <test-method signature="datePicker()[pri:0, instance:testcases.Datepicker@58594a11]" started-at="2023-11-11T12:51:57 IST" name="datePicker" finished-at="2023-11-11T12:52:07 IST" duration-ms="10521" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- datePicker -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:testcases.Datepicker@58594a11]" started-at="2023-11-11T12:52:07 IST" name="afterclass" finished-at="2023-11-11T12:52:07 IST" duration-ms="233" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- testcases.Datepicker -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
